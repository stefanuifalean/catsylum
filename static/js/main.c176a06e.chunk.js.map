{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","breed","email","className","alt","src","width","height","CardList","cardArray","source","map","item","key","breeds","primary","contact","SearchBox","searchChanged","type","placeholder","onChange","Scroll","props","children","App","onSearchChange","event","setState","searchField","target","value","state","authURL","apiURL","a","fetch","method","headers","body","authResponse","json","authResult","access_token","Authorization","queryResponse","getResult","console","log","animals","fetchDataFromApi","this","filteredSource","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PA0BeA,EAxBF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC/B,OACE,6BAASC,UAAU,8EACjB,yBACEC,IAAI,OACJC,IAAG,wCAAmCN,EAAnC,8BAEL,6BACE,4BAAKC,GACL,2BACE,yBACEI,IAAI,SACJC,IAAI,sEACJC,MAAM,KACNC,OAAO,OACN,IACFN,GAEH,2BAAIC,MCFGM,EAfE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACOC,KAAI,SAACC,GAC5B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKb,GACVA,GAAIa,EAAKb,GACTC,KAAMY,EAAKZ,KACXC,MAAOW,EAAKE,OAAOC,QACnBb,MAAOU,EAAKI,QAAQd,WAI1B,OAAO,kBAAC,WAAD,KAAWO,ICALQ,EAbG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,OACE,yBAAKf,UAAU,OACb,2BACEA,UAAU,mCACVgB,KAAK,SACLC,YAAY,cACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,kBAAC,WAAD,KACGA,EAAMC,WCoEEC,G,wDAlEb,aAAe,IAAD,8BACZ,gBA4DFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA5D1C,EAAKC,MAAQ,CACXtB,OAAQ,GACRmB,YAAa,IAJH,E,gEAQO,IAAD,QAGE,uCAAG,WAAOI,EAASC,GAAhB,uBAAAC,EAAA,sEACIC,MAAMH,EAAS,CACtCI,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBC,KACE,sJAPiB,cACjBC,EADiB,gBASEA,EAAaC,OATf,cASjBC,EATiB,OAUfC,EAAiBD,EAAjBC,aAVe,SAWKP,MAAMF,EAAQ,CACtCI,QAAS,CACPM,cAAc,UAAD,OAAYD,MAbR,cAWjBE,EAXiB,iBAgBCA,EAAcJ,OAhBf,QAgBjBK,EAhBiB,OAiBrBC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAAElB,OAAQoC,EAAUG,UAlBb,4CAAH,wDAoBpBC,CAtBgB,4CACD,6D,+BAwBP,IAAD,EACyBC,KAAKnB,MAA7BtB,EADD,EACCA,OAAQmB,EADT,EACSA,YACVuB,EAAiB1C,EAAO2C,QAAO,SAACzC,GACpC,OAAOA,EAAKZ,KAAKsD,cAAcC,SAAS1B,EAAYyB,kBAEtD,OAAQ5C,EAAO8C,OAGb,yBAAKrD,UAAU,mBACb,4BAAQA,UAAU,iCAChB,wBAAIA,UAAU,MAAd,YACA,kBAAC,EAAD,CAAWe,cAAeiC,KAAKzB,kBAEjC,0BAAMvB,UAAU,gCACd,6BACE,6BACE,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAUO,OAAQ0C,SAXxB,2C,GAzCYK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.c176a06e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, breed, email }) => {\n  return (\n    <article className=\"dib tc bg-light-purple ba bw1 b--orange br3 br--left shadow-5 pa3 ma2 grow\">\n      <img\n        alt=\"cats\"\n        src={`https://robohash.org/set_set4/${id}.png/bg_bg3/size_200x200`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>\n          <img\n            alt=\"hearts\"\n            src=\"https://github.githubassets.com/images/icons/emoji/unicode/2665.png\"\n            width=\"14\"\n            height=\"14\"\n          />{\" \"}\n          {breed}\n        </p>\n        <p>{email}</p>\n      </div>\n    </article>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ source }) => {\n  const cardArray = source.map((item) => {\n    return (\n      <Card\n        key={item.id}\n        id={item.id}\n        name={item.name}\n        breed={item.breeds.primary}\n        email={item.contact.email}\n      />\n    );\n  });\n  return <Fragment>{cardArray}</Fragment>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchChanged}) => {\n  return (\n    <nav className=\"pa2\">\n      <input\n        className=\"bg-hot-pink ba b--light-blue pa3\"\n        type=\"search\"\n        placeholder=\"search cats\"\n        onChange={searchChanged}\n      />\n    </nav>\n  );\n};\n\nexport default SearchBox;\n","import React, {Fragment} from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <Fragment /* style={{height: \"80vh\", overflowY: \"scroll\", border: \"1px solid black\"}} */>\n      {props.children}\n    </Fragment>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      source: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const authURL = \"https://api.petfinder.com/v2/oauth2/token\";\n    const apiURL = \"https://api.petfinder.com/v2/animals?type=cat&limit=100\";\n    let fetchDataFromApi = async (authURL, apiURL) => {\n      let authResponse = await fetch(authURL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body:\n          \"grant_type=client_credentials&client_id=IvN9mFnzK1XfsbCb1Pw1ID3586m0nqNwgSnm4q3cDezVau2wfW&client_secret=MRl5a0VCZLrsiKb04fjnS4Vbh37Z7zlMZnx9oup8\",\n      });\n      let authResult = await authResponse.json();\n      let { access_token } = authResult;\n      let queryResponse = await fetch(apiURL, {\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n        },\n      });\n      let getResult = await queryResponse.json();\n      console.log(getResult);\n      this.setState({ source: getResult.animals });\n    };\n    fetchDataFromApi(authURL, apiURL);\n  }\n\n  render() {\n    const { source, searchField } = this.state;\n    const filteredSource = source.filter((item) => {\n      return item.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !source.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"flexbox-wrapper\">\n        <header className=\"flexbox-row flexbox-row-fixed\">\n          <h1 className=\"f1\">Catsylum</h1>\n          <SearchBox searchChanged={this.onSearchChange} />\n        </header>\n        <main className=\"flexbox-row flexbox-row-fill\">\n          <div>\n            <div>\n              <Scroll>\n            <CardList source={filteredSource} />\n          </Scroll>\n            </div>\n          </div>\n          \n        </main>\n      </div>\n    );\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"tachyons\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}